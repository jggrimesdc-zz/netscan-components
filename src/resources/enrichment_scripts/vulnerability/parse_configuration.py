""" Hacky script to parse vulnerability record configurations """

import itertools
import json
from pathlib import Path


def get_records():
    data_path = Path("tmp/nvdcve-1.1-modified.json")
    data = json.loads(data_path.read_text())

    records = data.get("CVE_Items")
    print("Found %s records" % len(records))
    return records


def parse_records():
    records = get_records()
    for record in records:
        parse_record(record)


def parse_record(record: dict) -> dict:
    """ parse a single vulnerability record """
    cve = record.get("cve", {}).get("CVE_data_meta", {}).get("ID")
    print('parsing record "%s"' % cve)
    # Sort to get ORs before ANDs
    children = parse_nodes(record.get("configurations", {}).get("nodes", []))
    print("Found %s uris! First 10:\n%s" % (len(children), children[:10]))


def parse_nodes(nodes: list) -> list:
    """ Parse nodes in records and return the applicable uri combo for each node """
    children = []
    for node in nodes:
        children += parse_node(node)
    return children


def parse_node(node: dict) -> list:
    """ Parse a single node & return a list of uris """
    children = []
    if node.get("operator") == "OR":
        new_children = node.get("cpe_match")
        if new_children:
            for child in new_children:
                if "operator" in child:
                    children += parse_node(child)
                else:
                    children.append(child.get("cpe23Uri"))
    if node.get("operator") == "AND":
        new_children = node.get("children")
        buckets = [parse_node(node) for node in new_children]
        children += [f"{a}&&{b}" for a, b in itertools.product(*buckets)]
    return children


if __name__ == "__main__":
    parse_records()
